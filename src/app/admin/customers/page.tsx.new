'use client';

import { useEffect, useState } from 'react';
import dynamic from 'next/dynamic';
import { Users, UserCheck, BarChart2 } from 'lucide-react';

// Dynamically import the ReferralStats component to avoid SSR issues
const ReferralStats = dynamic(() => import('@/components/ReferralStats'), {
  ssr: false,
  loading: () => (
    <div className="flex justify-center items-center h-64">
      <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
    </div>
  )
});

interface Customer {
  id: string;
  fullName: string;
  email: string;
  createdAt: string;
  totalSpent: number;
  lastActivity?: string;
  orders: any[];
  cart: any[];
  wishlist: any[];
  addresses: any[];
}

interface CustomerDetails {
  orders: any[];
  cart: any[];
  wishlist: any[];
  addresses: any[];
}

export default function AdminCustomersPage() {
  const [activeTab, setActiveTab] = useState<'customers' | 'referrals'>('customers');
  const [customers, setCustomers] = useState<Customer[]>([]);
  const [loading, setLoading] = useState(true);
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null);
  const [customerDetails, setCustomerDetails] = useState<CustomerDetails | null>(null);
  const [detailsLoading, setDetailsLoading] = useState(false);

  // Fetch customers data
  useEffect(() => {
    const fetchCustomers = async () => {
      try {
        const response = await fetch('/api/admin/customers');
        const data = await response.json();
        setCustomers(data);
      } catch (error) {
        console.error('Error fetching customers:', error);
      } finally {
        setLoading(false);
      }
    };

    if (activeTab === 'customers') {
      fetchCustomers();
    }

    // Auto-refresh every 30 seconds
    const interval = setInterval(() => {
      if (activeTab === 'customers') {
        fetchCustomers();
      }
    }, 30000);

    return () => clearInterval(interval);
  }, [activeTab]);

  const fetchCustomerDetails = async (customerId: string) => {
    setDetailsLoading(true);
    try {
      const [cart, wishlist, addresses, orders] = await Promise.all([
        fetch(`/api/user-data?userId=${customerId}&type=cart`).then(r => r.json()),
        fetch(`/api/user-data?userId=${customerId}&type=wishlist`).then(r => r.json()),
        fetch(`/api/user-data?userId=${customerId}&type=addresses`).then(r => r.json()),
        fetch(`/api/user-data?userId=${customerId}&type=orders`).then(r => r.json())
      ]);
      
      setCustomerDetails({
        cart: Array.isArray(cart) ? cart : [],
        wishlist: Array.isArray(wishlist) ? wishlist : [],
        addresses: Array.isArray(addresses) ? addresses : [],
        orders: Array.isArray(orders) ? orders : []
      });
    } catch (error) {
      console.error('Error fetching customer details:', error);
    } finally {
      setDetailsLoading(false);
    }
  };

  if (loading && activeTab === 'customers') {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-2xl font-bold">
          {activeTab === 'customers' ? 'Customers' : 'Referral Program'}
        </h1>
      </div>
      
      <div className="border-b border-gray-200 mb-6">
        <nav className="-mb-px flex space-x-8">
          <button
            onClick={() => setActiveTab('customers')}
            className={`${
              activeTab === 'customers'
                ? 'border-indigo-500 text-indigo-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
          >
            Customers
          </button>
          <button
            onClick={() => setActiveTab('referrals')}
            className={`${
              activeTab === 'referrals'
                ? 'border-indigo-500 text-indigo-600'
                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
            } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
          >
            Referral Program
          </button>
        </nav>
      </div>

      {activeTab === 'referrals' ? (
        <ReferralStats />
      ) : (
        <div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="p-3 rounded-full bg-blue-100 text-blue-600 mr-4">
                  <Users className="h-6 w-6" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-500">Total Customers</p>
                  <p className="text-2xl font-semibold">{customers.length}</p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="p-3 rounded-full bg-green-100 text-green-600 mr-4">
                  <UserCheck className="h-6 w-6" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-500">Active Customers</p>
                  <p className="text-2xl font-semibold">
                    {customers.filter(c => c.lastActivity).length}
                  </p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="p-3 rounded-full bg-purple-100 text-purple-600 mr-4">
                  <BarChart2 className="h-6 w-6" />
                </div>
                <div>
                  <p className="text-sm font-medium text-gray-500">Total Revenue</p>
                  <p className="text-2xl font-semibold">
                    ₹{customers.reduce((sum, customer) => sum + (customer.totalSpent || 0), 0).toFixed(2)}
                  </p>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white shadow overflow-hidden sm:rounded-lg">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Customer
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Email
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Orders
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Total Spent
                    </th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      Last Active
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {customers.map((customer) => (
                    <tr 
                      key={customer.id} 
                      className="hover:bg-gray-50 cursor-pointer"
                      onClick={() => {
                        setSelectedCustomer(customer);
                        fetchCustomerDetails(customer.id);
                      }}
                    >
                      <td className="px-6 py-4 whitespace-nowrap">
                        <div className="flex items-center">
                          <div className="flex-shrink-0 h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                            <span className="text-gray-600">
                              {customer.fullName.split(' ').map(n => n[0]).join('').toUpperCase()}
                            </span>
                          </div>
                          <div className="ml-4">
                            <div className="text-sm font-medium text-gray-900">
                              {customer.fullName}
                            </div>
                          </div>
                        </div>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {customer.email}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {customer.orders?.length || 0}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        ₹{customer.totalSpent?.toFixed(2) || '0.00'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {customer.lastActivity ? new Date(customer.lastActivity).toLocaleDateString() : 'N/A'}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
